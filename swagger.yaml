swagger: "2.0"
info:
  title: Pokemon API
  description: Api to handle pokemon:s.
  version: 1.0.0
host: localhost:3000
basePath: /api
schemes:
  - http
definitions:
  Evolution:
    type: object
    properties:
      num:
        type: string
      name:
        type: string

  Pokemon:
    type: object
    properties:
      id:
        type: integer
        format: int64
      num:
        type: string
      name:
        type: string
      img:
        type: string
      type:
        type: array
        items:
          type: string
      height:
        type: string
      weight:
        type: string
      candy:
        type: string
      candy_count:
        type: integer
      egg:
        type: string
      spawn_chance:
        type: number
      avg_spawns:
        type: number
      spawn_time:
        type: string
      multipliers:
        type: array
        items:
          type: number
      weaknesses:
        type: array
        items:
          type: string
      prev_evolution:
        type: array
        items:
          $ref: '#/definitions/Evolution'
      next_evolution:
        type: array
        items:
          $ref: '#/definitions/Evolution'
paths:
  /pokemon/mock:
    get:
      tags:
        - Pokemon
      summary: Mock database with pokemon
      description: Add all pokemon:s to database
      produces:
        - application/json
      responses:
        200:
          description: Successful response

  /pokemon:
    post:
      tags:
        - Pokemon
      summary: Create a new Pokemon
      description: Endpoint to create a new Pokemon.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inputPokemon
          description: The Pokemon object to be created
          required: true
          schema:
            $ref: '#/definitions/Pokemon'
      responses:
        201:
          description: Successful creation of a new Pokemon
        400:
          description: Invalid request data

    get:
      tags:
        - Pokemon
      summary: Get all Pokemon
      description: Retrieves a collection of all Pokemon.
      produces:
        - application/json
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Pokemon'

  /pokemon/byName:
    get:
      tags:
        - Pokemon
      summary: Get Pokemon by name
      description: Retrieves a Pokemon by its name.
      parameters:
        - in: query
          name: name
          description: Name of the Pokemon
          minLength: 3
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Pokemon'
        400:
          description: Invalid name

  /pokemon/byType:
    get:
      tags:
        - Pokemon
      summary: Get Pokemon by type
      description: Retrieves Pokemon by their type, with optional name and sort parameters.
      parameters:
        - in: query
          name: type
          description: Type of the Pokemon
          required: false
          type: string
        - in: query
          name: name
          description: Name of the Pokemon
          required: false
          type: string
        - in: query
          name: sort
          description: Sort order
          required: false
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Pokemon'

  /pokemon/weak-against:
    post:
      tags:
        - Pokemon
      summary: Get weak against Pokemon
      description: Retrieves random Pokemon that supplied pokemon should flee from (weak against).
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inputPokemon
          description: The Pokemon object to check against
          required: true
          schema:
            $ref: '#/definitions/Pokemon'
      responses:
        200:
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/Pokemon'
        404:
          description: No strong opponents found

  /pokemon/{id}:
    get:
      tags:
        - Pokemon
      summary: Get Pokemon by ID
      description: Retrieves a Pokemon by its ID. Also includes prev and next evolutions.
      parameters:
        - in: path
          name: id
          description: ID of the Pokemon
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Pokemon'
        400:
          description: Invalid ID

  /pokemon/delete:
    delete:
      summary: Delete all pokemon:s in database
      description: Deletes all data pokemon:s in database. Removes the collection.
      responses:
        200:
          description: Collection removed.
        default:
          description: Unexpected error.
      tags:
        - Pokemon





